# -*- coding: utf-8 -*-
"""CNN_Conduta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17yrw_7ENpbvTxxvDExaHZi3Hj1fm99JS
"""

import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import np_utils

import itertools

df = pd.read_csv('/content/sample_data/tecido_viavel_inviavel_arvore_decisao_correto_5.csv')
print(df)

previsores = df.iloc[:, 0:5].values
classes = df.iloc[:,5].values
print(classes)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
classes = labelencoder.fit_transform(classes)
classes_dummy = np_utils.to_categorical(classes)

from sklearn.model_selection import train_test_split
previsores_treinamento, previsores_teste, classe_treinamento, classe_teste = train_test_split(previsores, classes_dummy, test_size=0.25)
print(classe_teste)

classificador = Sequential()
classificador.add(Dense(units = 4, activation = 'relu', input_dim = 5))
classificador.add(Dense(units = 4, activation = 'relu'))
classificador.add(Dense(units = 16, activation = 'softmax'))
classificador.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['categorical_accuracy'])

classificador.summary()

history = classificador.fit(previsores_treinamento, classe_treinamento, batch_size = 10, epochs = 50, verbose =1, validation_data=(previsores_teste, classe_teste))

resultado = classificador.evaluate(previsores_teste, classe_teste)
previsoes = classificador.predict(previsores_teste)
#print(previsoes)
previsoes = (previsoes > 0.5)
import numpy as np
classe_teste2 = [np.argmax(t) for t in classe_teste]
previsoes2 = [np.argmax(t) for t in previsoes]

fig = plt.figure(figsize = (20,10))
plt.subplot(1,2,1)
plt.plot(history.history['loss'], label = 'Treino')
plt.plot(history.history['val_loss'], label = 'Validação')
plt.xlabel('Épocas', size = 16)
plt.ylabel('Custo', size = 16)
plt.xticks(size = 16)
plt.yticks(size = 16)
plt.legend(prop = {'size': 16})
plt.subplot(1,2,2)
plt.plot(history.history['categorical_accuracy'], label = 'Treino')
plt.plot(history.history['val_categorical_accuracy'], label = 'Validação')
plt.xlabel('Épocas', size = 16)
plt.ylabel('Acuracidade', size = 16)
plt.xticks(size = 16)
plt.yticks(size = 16)
plt.legend(prop = {'size': 16})
plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(previsoes2, classe_teste2)
print(cm)

classes = ['tr1', 'tr2', 'tr3', 'tr4', 'tr5','tr6','tr7','tr8','tr9','tr10','tr11','tr12','tr13','tr14','tr15']

titulo = 'Matriz de Confusão'
fig = plt.figure(figsize = (20,10))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title(titulo)
plt.colorbar()
tick_marks = np.arange(len(classes))
plt.xticks(tick_marks, classes, rotation = 45)
plt.yticks(tick_marks, classes)
fmt = 'd'
thresh = cm.max() / 2.

for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
  plt.text(j, i, format(cm[i, j], fmt), horizontalalignment='center', 
           color='white' if cm[i,j] > thresh else 'black')

plt.ylabel('Classificação correta')
plt.xlabel('Predição')
plt.savefig('matriz_confu.png')

model_json = classificador.to_json()
with open('network.json', 'w') as json_file:
  json_file.write(model_json)

from keras.models import save_model
save_model(classificador,'/content/weights.hdf5')

novo_registro = np.array([2,2,1,1,1])
novo_registro = novo_registro.reshape(1, -1)

previsao = classificador.predict(novo_registro)

np.argmax(previsao)